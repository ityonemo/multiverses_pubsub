defmodule Multiverses.Presence do
  @moduledoc """
  ## Using Multiverses with Phoenix Presence

  Since Phoenix Presence is a behaviour module that autogenerates functions for
  you with its `using` directive, it is inappropriate to use Multiverses to
  override Phoenix Presence.  Instead, you will have to override the autogenerated
  module instead.  Presuming that you have created a Presence module like so:

  ```elixir
  defmodule MyApp.Presence do
    use Phoenix.Presence, otp_app: <my_otp_app>,
                          pubsub_server: <my_pubsub_server>
  end
  ```

  In your `test_helpers.exs` file (or in a support directory), build the replacement presence module.

  ```elixir

  require Multiverses.Presence
  Multiverses.Presence.clone(MyApp.Presence, as: MyApp.Multiverse.Presence)

  ```

  Now set up your configuration:

  ### in `config.exs`

  ```elixir
  config :my_app, MyApp.Presence, MyApp.Presence
  ```

  ### in `test.exs`

  ```elixir
  config :my_app, MyApp.Presence, MyApp.Multiverse.Presence
  ```

  ### in modules that use presence

  ```elixir
  defmodule MyApp.UsesPresence do
    @my_app_presence Application.compile_env!(:my_app, MyApp.Presence)

    #...
  end
  ```

  ### in your test module

  ```elixir
  defmodule MyAppTest.UsesPresenceTest do
    use ExUnit.Case, async: true

    setup do
      Multiverses.shard(PubSub)
    end
  end
  ```


  ## Important Note:

  The Presence struct will have a `:topic` key whose value includes the
  universe postfix.  If you're matching against this key, be sure to change
  your match to be `"topic" <> _` instead of `"topic"`
  """

  defmacro clone(initial, opts) do
    target = Keyword.fetch!(opts, :as)

    quote do
      defmodule unquote(target) do
        use Multiverses.Clone,
          module: unquote(initial),
          except: [
            fetch: 2,
            get_by_key: 2,
            list: 1,
            track: 4,
            untrack: 3,
            update: 4
          ]

        import Multiverses.PubSub, only: [_sharded: 1]

        def fetch(topic, presences) do
          if is_binary(topic) do
            unquote(initial).fetch(_sharded(topic), presences)
          else
            # channel
            unquote(initial).fetch(topic, presences)
          end
        end

        def get_by_key(topic, presences) do
          if is_binary(topic) do
            unquote(initial).get_by_key(_sharded(topic), presences)
          else
            # channel
            unquote(initial).get_by_key(topic, presences)
          end
        end

        def list(topic) do
          if is_binary(topic) do
            unquote(initial).list(_sharded(topic))
          else
            # channel
            unquote(initial).list(topic)
          end
        end

        def track(pid, topic, key, meta) do
          unquote(initial).track(pid, _sharded(topic), key, meta)
        end

        def untrack(pid, topic, key) do
          unquote(initial).untrack(pid, _sharded(topic), key)
        end

        def update(pid, topic, key, meta) do
          unquote(initial).update(pid, _sharded(topic), key, meta)
        end
      end
    end
  end
end
